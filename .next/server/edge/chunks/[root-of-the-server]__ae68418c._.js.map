{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/ (unsupported edge import stream)"],"sourcesContent":["__turbopack_context__.n(__import_unsupported(`stream`));\n"],"names":[],"mappings":"AAAA,sBAAsB,CAAC,CAAC,qBAAqB,CAAC,MAAM,CAAC"}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/ (unsupported edge import crypto)"],"sourcesContent":["__turbopack_context__.n(__import_unsupported(`crypto`));\n"],"names":[],"mappings":"AAAA,sBAAsB,CAAC,CAAC,qBAAqB,CAAC,MAAM,CAAC"}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/auth.ts"],"sourcesContent":["// src/lib/auth.ts\nimport { NextRequest } from 'next/server';\nimport jwt from 'jsonwebtoken';\n\ninterface AuthUser {\n  id: number;\n  nombre: string;\n  email: string;\n  rol: string;\n}\n\ninterface AuthResult {\n  success: boolean;\n  user: AuthUser | null;\n  error: string | null;\n  status: number;\n}\n\nexport async function verifyAuth(request: NextRequest): Promise<AuthResult> {\n  try {\n    // Obtener token de autorización\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return {\n        success: false,\n        error: 'Token no proporcionado',\n        status: 401,\n        user: null\n      };\n    }\n\n    const token = authHeader.split(' ')[1];\n    const secret = process.env.JWT_SECRET || 'secret_key';\n    \n    // Verificar el token\n    const decoded = jwt.verify(token, secret) as AuthUser;\n\n    // Verificar que el token decodificado contiene la info correcta\n    if (!decoded || typeof decoded !== 'object' || !decoded.id) {\n      return {\n        success: false,\n        error: 'Token inválido',\n        status: 401,\n        user: null\n      };\n    }\n\n    return {\n      success: true,\n      user: decoded,\n      error: null,\n      status: 200\n    };\n  } catch (error) {\n    console.error('Error en verificación de autenticación:', error);\n    return {\n      success: false,\n      error: 'Error de autenticación',\n      status: 401,\n      user: null\n    };\n  }\n}"],"names":[],"mappings":"AAAA,kBAAkB;;;;AAElB;;AAgBO,eAAe,WAAW,OAAoB;IACnD,IAAI;QACF,gCAAgC;QAChC,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;YACpD,OAAO;gBACL,SAAS;gBACT,OAAO;gBACP,QAAQ;gBACR,MAAM;YACR;QACF;QAEA,MAAM,QAAQ,WAAW,KAAK,CAAC,IAAI,CAAC,EAAE;QACtC,MAAM,SAAS,QAAQ,GAAG,CAAC,UAAU,IAAI;QAEzC,qBAAqB;QACrB,MAAM,UAAU,6IAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QAElC,gEAAgE;QAChE,IAAI,CAAC,WAAW,OAAO,YAAY,YAAY,CAAC,QAAQ,EAAE,EAAE;YAC1D,OAAO;gBACL,SAAS;gBACT,OAAO;gBACP,QAAQ;gBACR,MAAM;YACR;QACF;QAEA,OAAO;YACL,SAAS;YACT,MAAM;YACN,OAAO;YACP,QAAQ;QACV;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2CAA2C;QACzD,OAAO;YACL,SAAS;YACT,OAAO;YACP,QAAQ;YACR,MAAM;QACR;IACF;AACF"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["\r\n// src/middleware.ts\r\nimport { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\nimport { verifyAuth } from '@/lib/auth';\r\n\r\n// Este middleware verifica la autenticación para rutas de API protegidas\r\nexport async function middleware(request: NextRequest) {\r\n  // Rutas que no requieren autenticación\r\n  const publicPaths = [\r\n    '/api/auth',\r\n    '/api/db-check'\r\n  ];\r\n\r\n  // Si la ruta es pública, permitir acceso\r\n  const path = request.nextUrl.pathname;\r\n  if (!path.startsWith('/api/') || publicPaths.some(publicPath => path.startsWith(publicPath))) {\r\n    return NextResponse.next();\r\n  }\r\n\r\n  // Verificar token JWT para rutas protegidas\r\n  const auth = await verifyAuth(request);\r\n  if (!auth.success) {\r\n    return NextResponse.json(\r\n      { error: auth.error },\r\n      { status: auth.status }\r\n    );\r\n  }\r\n\r\n  // Si la autenticación es exitosa, permitir acceso\r\n  return NextResponse.next();\r\n}\r\n\r\n// Configurar el matcher para las rutas de API\r\nexport const config = {\r\n  matcher: '/api/:path*',\r\n};"],"names":[],"mappings":"AACA,oBAAoB;;;;;AACpB;AAAA;AAEA;;;AAGO,eAAe,WAAW,OAAoB;IACnD,uCAAuC;IACvC,MAAM,cAAc;QAClB;QACA;KACD;IAED,yCAAyC;IACzC,MAAM,OAAO,QAAQ,OAAO,CAAC,QAAQ;IACrC,IAAI,CAAC,KAAK,UAAU,CAAC,YAAY,YAAY,IAAI,CAAC,CAAA,aAAc,KAAK,UAAU,CAAC,cAAc;QAC5F,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,4CAA4C;IAC5C,MAAM,OAAO,MAAM,CAAA,GAAA,0HAAA,CAAA,aAAU,AAAD,EAAE;IAC9B,IAAI,CAAC,KAAK,OAAO,EAAE;QACjB,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,KAAK,KAAK;QAAC,GACpB;YAAE,QAAQ,KAAK,MAAM;QAAC;IAE1B;IAEA,kDAAkD;IAClD,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;AACX"}}]
}